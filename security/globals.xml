<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: fbc4ef92fa953823ed73021e462bd291499dc633 Maintainer: shein Status: ready -->
<!-- Reviewed: yes Maintainer: lex -->
<!-- $Revision$ -->
<!-- splitted from ./index.xml, last change in rev 1.66 -->
  <chapter xml:id="security.globals" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
   <title>Использование глобальных переменных (Register_Globals)</title>
   &warn.deprecated.feature-5-3-0.removed-5-4-0;
   <para>
    Наверное, наиболее спорным моментом в разработке <acronym>PHP</acronym>
    стала замена значения по умолчанию для <acronym>PHP</acronym>-директивы
    <link linkend="ini.register-globals">register_globals</link>
    с ON на OFF в версии <acronym>PHP</acronym>
    <link xlink:href="&url.php.release4.2.0;">4.2.0</link>.
    Большинство пользователей полагались на работу этой опции, даже
    не зная, что это за опция и думали, что это просто способ работы
    самого <acronym>PHP</acronym>. Эта страница документации призвана
    показать, как эта настройка сочетается с вопросами безопасности при
    разработке приложений. Следует понимать, что сама по себе эта опция 
    никак не влияет на безопасность, угрозу представляет некорректное
    использование предоставляемых ею возможностей.
   </para>
   <para>
    В случае, если register_globals включена, то перед выполнением
    вашего кода будут инициализированы различные переменные, например,
    переменные, переданные при отправке <acronym>HTML</acronym>-формы.
    Также, учитывая тот факт, что <acronym>PHP</acronym> не требует
    инициализации переменных, написать потенциально опасный
    код очень легко. Это было очень сложным решением, но сообщество
    <acronym>PHP</acronym> решило изменить значение по умолчанию
    этой директивы на OFF. Если директива включена, то при написании кода
    разработчики не могли с уверенностью сказать, откуда пришла та или иная
    переменная и насколько она достоверна. До такого нововведения
    переменные, определяемые разработчиком внутри скрипта,
    и передаваемые пользователем внешние данные могли перемешиваться. 
    Приведём простой пример злоупотребления конфигурационной опцией register_globals: 
   </para>
   <para>
    <example>
     <title>Пример опасного кода с register_globals = on</title>
     <programlisting role="php">
<![CDATA[
<?php
// устанавливаем переменную $authorized = true только для пользователей, прошедших авторизацию
if (authenticated_user()) {
    $authorized = true;
}

// Поскольку в случае неудачи при проверке авторизации переменная $authorized 
// не установлена, она может быть установлена автоматически благодаря register_globals,
// например, при GET-запросе auth.php?authorized=1.
// Таким образом, любой может пройти эту проверку!
if ($authorized) {
    include "/highly/sensitive/data.php";
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    В случае register_globals = on логика работы скрипта может быть нарушена.
    В случае, если установленное значение off, переменная <varname>$authorized</varname> не 
    может быть установлена из внешних данных запроса, и скрипт будет работать
    корректно. Но всё же инициализация переменных - один из признаков хорошего
    тона в программировании. Например, в приведённом выше участке кода 
    мы могли поместить <literal>$authorized = false</literal> в качестве 
    первой строки. Такой код работал бы как со значением on, так и off опции
    register_globals, и подразумевая, что по умолчанию пользователь не проходил
    авторизацию.
   </para>
   <para>
    Приведём ещё один пример, использующий <link linkend="ref.session">сессии</link>.
    В случае, если register_globals = on, мы можем использовать переменную
    <varname>$username</varname> в приведённом ниже примере, но тогда у нас
    не будет уверенности в достоверности её значения (к примеру,
    <varname>$username</varname> могла быть передана в GET-запросе
    через <acronym>URL</acronym>).
   </para>
   <para>
    <example>
     <title>Пример использования сессий со значением register_globals on или off</title>
     <programlisting role="php">
<![CDATA[
<?php
// Мы не знаем, откуда получена переменная $username, но точно знаем, что
// переменная $_SESSION хранит в себе данные сессии
if (isset($_SESSION['username'])) {

    echo "Привет, <b>{$_SESSION['username']}</b>";

} else {

    echo "Привет, <b>гость</b><br />";
    echo "Вы хотите войти?";

}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Также существует возможность реализации превентивных мер
    в случае попытки подмены переменных. Так как во время разработки приложения
    мы знаем ожидаемое значение переменной, а также знаем её достоверное 
    значение, мы можем их сопоставить. Это не защитит код от подмены переменных,
    но усложнит перебор возможных вариантов. Если вы не хотите знать, как именно
    были получены внешние данные, используйте переменную <varname>$_REQUEST</varname>,
    которая является смесью из данных GET- и POST-запросов, а также данных COOKIE.
    Также, информацию об этом можно найти в разделе
    <link linkend="language.variables.external">внешние данные в PHP</link>.
   </para>
   <para>
    <example>
     <title>Обнаружение попытки подмены переменных</title>
     <programlisting role="php">
<![CDATA[
<?php
if (isset($_COOKIE['MAGIC_COOKIE'])) {

    // MAGIC_COOKIE получена из достоверного источника.
    // Для полной уверенности необходимо проверить её значение.

} elseif (isset($_GET['MAGIC_COOKIE']) || isset($_POST['MAGIC_COOKIE'])) {

   mail("admin@example.com", "Обнаружена попытка взлома", $_SERVER['REMOTE_ADDR']);
   echo "Обнаружено нарушение безопасности, администратор уведомлен.";
   exit;

} else {

   // MAGIC_COOKIE в данных запроса не присутствует

}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Следует понимать, что установка register_globals в off не сделает ваш код
    безопасным. Каждую полученную от пользователя переменную следует проверять
    на соответствие ожидаемому значению. Всегда проверяйте ввод пользователя и 
    инициализируйте все используемые переменные! Для проверки на наличие
    неинициализированных переменных можно включить в опцию
    <function>error_reporting</function>
    отображение ошибок категории <constant>E_NOTICE</constant>.
   </para>
   <para>
    О том, как эмулировать включённое или отключённое состояние
    register_globals, смотрите этот <link linkend="faq.misc.registerglobals">FAQ</link>.
   </para>

  </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
