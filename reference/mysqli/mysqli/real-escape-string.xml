<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 46319b5952750bc2a5e030c0a216023b551b60c1 Maintainer: tmn Status: ready -->
<!-- Reviewed: yes Maintainer: lex -->
<!-- $Revision$ -->
<refentry xml:id="mysqli.real-escape-string" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>mysqli::real_escape_string</refname>
  <refname>mysqli::escape_string</refname>
  <refname>mysqli_real_escape_string</refname>
  <refpurpose>
   Экранирует специальные символы в строке для использования в SQL-выражении,
   используя текущий набор символов соединения
  </refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <para>&style.oop;</para>
  <methodsynopsis role="oop">
   <modifier>public</modifier> <type>string</type><methodname>mysqli::escape_string</methodname>
   <methodparam><type>string</type><parameter>escapestr</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis role="oop">
   <type>string</type><methodname>mysqli::real_escape_string</methodname>
   <methodparam><type>string</type><parameter>escapestr</parameter></methodparam>
  </methodsynopsis>
  <para>&style.procedural;</para>
  <methodsynopsis>
   <type>string</type><methodname>mysqli_real_escape_string</methodname>
   <methodparam><type>mysqli</type><parameter>link</parameter></methodparam>
   <methodparam><type>string</type><parameter>escapestr</parameter></methodparam>
  </methodsynopsis>
  <para>
   Эта функция используется для создания допустимых в SQL строк, которые можно
   использовать в SQL выражениях. Заданная строка кодируется в экранированную SQL
   строку, используя текущий набор символов подключения.
  </para>
  <caution>
   <title>Безопасность: набор символов по умолчанию</title>
   <para>
    Набор символов должен быть задан либо на стороне сервера, либо с помощью
    API-функции <function>mysqli_set_charset</function>. В противном случае
    <function>mysqli_real_escape_string</function> работать не будет. За
    дополнительной информацией обращайтесь к документации
    <link linkend="mysqlinfo.concepts.charset">наборы символов</link>.
   </para>
  </caution>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    &mysqli.link.description;
    <varlistentry>
     <term><parameter>escapestr</parameter></term>
     <listitem>
      <para>
       Строка, которую требуется экранировать.
      </para>
      <para>
       Экранируемые символы <literal>NUL (ASCII 0), \n, \r, \, ', ", и
       Control-Z</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает экранированную строку.
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
   <para>
    Использование этой функции без корректного идентификатора соединения
    вернёт &null; и вызовет ошибку уровня <constant>E_WARNING</constant>.
   </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Пример использования <methodname>mysqli::real_escape_string</methodname></title>
   <para>&style.oop;</para>
   <programlisting role="php">
<![CDATA[
<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* проверка соединения */
if (mysqli_connect_errno()) {
    printf("Не удалось подключиться: %s\n", mysqli_connect_error());
    exit();
}

$mysqli->query("CREATE TEMPORARY TABLE myCity LIKE City");

$city = "'s Hertogenbosch";

/* этот запрос вызовет ошибку, так как мы не экранировали $city */
if (!$mysqli->query("INSERT into myCity (Name) VALUES ('$city')")) {
    printf("Ошибка: %s\n", $mysqli->sqlstate);
}

$city = $mysqli->real_escape_string($city);

/* этот запрос отработает нормально */
if ($mysqli->query("INSERT into myCity (Name) VALUES ('$city')")) {
    printf("%d строк вставлено.\n", $mysqli->affected_rows);
}

$mysqli->close();
?>
]]>
   </programlisting>
   <para>&style.procedural;</para>
   <programlisting role="php">
<![CDATA[
<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* проверка соединения */
if (mysqli_connect_errno()) {
    printf("Не удалось подключиться: %s\n", mysqli_connect_error());
    exit();
}

mysqli_query($link, "CREATE TEMPORARY TABLE myCity LIKE City");

$city = "'s Hertogenbosch";

/* этот запрос вызовет ошибку, так как мы не экранировали $city */
if (!mysqli_query($link, "INSERT into myCity (Name) VALUES ('$city')")) {
    printf("Ошибка: %s\n", mysqli_sqlstate($link));
}

$city = mysqli_real_escape_string($link, $city);

/* этот запрос отработает нормально */
if (mysqli_query($link, "INSERT into myCity (Name) VALUES ('$city')")) {
    printf("%d строк вставлено.\n", mysqli_affected_rows($link));
}

mysqli_close($link);
?>
]]>
   </programlisting>
   &examples.outputs;
   <screen>
<![CDATA[
Ошибка: 42000
1 строк вставлено.
]]>
   </screen>
  </example>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Тем, кто привык использовать функцию
    <function>mysql_real_escape_string</function>,
    следует обратить внимание, что аргументы
    <function>mysqli_real_escape_string</function> отличаются от аргументов
    <function>mysql_real_escape_string</function>. Идентификатор
    <parameter>link</parameter> в <function>mysqli_real_escape_string</function>
    идёт первым, в то время как в <function>mysql_real_escape_string</function>
    первой идёт экранируемая строка.
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mysqli_set_charset</function></member>
    <member><function>mysqli_character_set_name</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
