<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: b824e2b1086e94a1077bd071964547283616030a Maintainer: rjhdby Status: ready -->
<!-- Reviewed: yes Maintainer: sergey -->
<!-- $Revision$ -->
<refentry xml:id="function.dbx-query" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>dbx_query</refname>
  <refpurpose>Посылает запрос и извлекает возвращённые строки (если есть)</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>dbx_query</methodname>
   <methodparam><type>object</type><parameter>link_identifier</parameter></methodparam>
   <methodparam><type>string</type><parameter>sql_statement</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter></methodparam>
  </methodsynopsis>
  <para>
   Посылает запрос и извлекает возвращённые строки.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>link_identifier</parameter></term>
     <listitem>
      <para>
       Ссылка на соединение, открытое с помощью <function>dbx_connect</function>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>sql_statement</parameter></term>
     <listitem>
      <para>
       SQL запрос.
      </para>
      <para>
       Данные в запросе должны быть 
       <link linkend="function.dbx-escape-string">корректно экранированы</link>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Параметр <parameter>flags</parameter> используется для контроля количества
       возвращаемой информации. Можно использовать любую комбинацию из 
       нижеперечисленных констант, объединённых побитовым ИЛИ (|).
       Флаги DBX_COLNAMES_* переопределяют настройку dbx.colnames_case в &php.ini;.
       <variablelist>
        <varlistentry>
         <term>
          <constant>DBX_RESULT_INDEX</constant>
         </term>
         <listitem>
          <simpara>
           <emphasis>Всегда</emphasis> установлена. Возвращённый объект содержит
           двумерный индексированный массив <property>data</property>. К примеру, 
           в выражении <literal>data[2][3]</literal>, <literal>2</literal> означает номер строки,
           а <literal>3</literal> номер столбца. Отсчёт начинается с индекса [0][0].
          </simpara>
          <simpara>
           Если задана константа <constant>DBX_RESULT_ASSOC</constant>, возвращённый
           объект будет также содержать информацию, относящуюся к
           <constant>DBX_RESULT_INFO</constant>, даже если она не будет задана.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term>
          <constant>DBX_RESULT_INFO</constant>
         </term>
         <listitem>
          <simpara>
           Предоставляет информацию о столбцах. Их имена и типы.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term>
          <constant>DBX_RESULT_ASSOC</constant>
         </term>
         <listitem>
          <simpara>
           Позволяет получать доступ к столбцам <property>data</property> по имени.
          </simpara>
          <simpara>
           Элементы ассоциативного массива являются ссылками на соответствующие
           элементы индексированного. Так что изменяя <literal>data[0][0]</literal> вы
           измените и <literal>data[0]['field_name_for_first_column']</literal>.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term>
          <constant>DBX_RESULT_UNBUFFERED</constant>
         </term>
         <listitem>
          <simpara>
           Этот флаг указывает не создавать свойство <property>data</property>. 
           Соответственно, свойство <property>rows</property> изначально будет равно 0.
           Используйте этот флаг для больших выборок. Для доступа к строкам используйте
           функцию <function>dbx_fetch_row</function>.
          </simpara>
          <simpara>
           Функция <function>dbx_fetch_row</function> возвращает строки учитывая
           все остальные, выставленные для запроса, флаги. Также, каждый успешный вызов
           этой функции, увеличивает <property>rows</property> на единицу.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term>
          <constant>DBX_COLNAMES_UNCHANGED</constant>
         </term>
         <listitem>
          <simpara>
           Имена столбцов возвращаются неизменными.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term>
          <constant>DBX_COLNAMES_UPPERCASE</constant>
         </term>
         <listitem>
          <simpara>
           Имена столбцов преобразуются к верхнему регистру.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term>
          <constant>DBX_COLNAMES_LOWERCASE</constant>
         </term>
         <listitem>
          <simpara>
           Имена столбцов преобразуются к нижнему регистру.
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
       Обратите внимание, что <constant>DBX_RESULT_INDEX</constant> используется всегда,
       независимо от выставленного параметра <parameter>flags</parameter>.
       Это значит, что только следующие комбинации имеют смысл:
       <itemizedlist>
        <listitem>
         <simpara>
          <constant>DBX_RESULT_INDEX</constant>
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>DBX_RESULT_INDEX</constant> |
          <constant>DBX_RESULT_INFO</constant>
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>DBX_RESULT_INDEX</constant> |
          <constant>DBX_RESULT_INFO</constant> |
          <constant>DBX_RESULT_ASSOC</constant> - по умолчанию, если
          <parameter>flags</parameter> не задан.
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>dbx_query</function> возвращает либо объект, либо <literal>1</literal> в
   случае успешного выполнения и <literal>0</literal> в случае ошибки. Объект возвращается
   только если <parameter>sql_statement</parameter> является запросом, возвращающим
   результирующий набор (т.е. запрос типа SELECT, если он не возвращает пустой набор). 
  </para>
  <para>
   Возвращённый объект содержит четыре, либо пять свойств, 
   в зависимости от параметра <parameter>flags</parameter>:
   <variablelist>
    <varlistentry>
     <term>
      <property>handle</property>
     </term>
     <listitem>
      <para>
       Это рабочий обработчик соединения с базой данных, который можно
       использовать с родными функциями расширения базы данных, в обход dbx.
       <informalexample>
        <programlisting role="php">
<![CDATA[
<?php
$result = dbx_query($link, "SELECT id FROM table");
mysql_field_len($result->handle, 0);
?>
]]>
        </programlisting>
       </informalexample>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <property>cols</property> и <property>rows</property>
     </term>
     <listitem>
      <para>
       Количество столбцов и строк в результирующем наборе соответственно.
       <informalexample>
        <programlisting role="php">
<![CDATA[
<?php
$result = dbx_query($link, 'SELECT id FROM table');
echo $result->rows; // количество строк
echo $result->cols; // количество столбцов
?>
]]>
        </programlisting>
       </informalexample>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <property>info</property> (опциональный)
     </term>
     <listitem>
      <simpara>
       Заполняется значениями только если константы <constant>DBX_RESULT_INFO</constant>
       или <constant>DBX_RESULT_ASSOC</constant> переданы в параметр
       <parameter>flags</parameter>. Представляет из себя двумерный массив, имеющий
       две строки (<literal>name</literal> и <literal>type</literal>), содержащие информацию
       о столбцах.
      </simpara>
      <example>
       <title>Вывод всех имён и типов столбцов</title>
       <programlisting role="php">
<![CDATA[
<?php
$result = dbx_query($link, 'SELECT id FROM table',
                     DBX_RESULT_INDEX | DBX_RESULT_INFO);

for ($i = 0; $i < $result->cols; $i++ ) {
    echo $result->info['name'][$i] . "\n";
    echo $result->info['type'][$i] . "\n";  
}
?>
]]>
       </programlisting>
      </example>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <property>data</property>
     </term>
     <listitem>
      <simpara>
       Это свойство содержит актуальный результирующий набор, возможно, ассоциированный
       с именами столбцов в зависимости от значения <parameter>flags</parameter>.
       Если задана <constant>DBX_RESULT_ASSOC</constant>, можно обращаться к столбцам
       по имени - <literal>$result->data[2]["field_name"]</literal>.
      </simpara>
      <example>
       <title>Вывод содержимого свойства data в таблицу HTML</title>
       <programlisting role="php">
<![CDATA[
<?php
$result = dbx_query($link, 'SELECT id, parentid, description FROM table');

echo "<table>\n";
foreach ($result->data as $row) {
    echo "<tr>\n";
    foreach ($row as $field) {
        echo "<td>$field</td>";
    }
    echo "</tr>\n";
}
echo "</table>\n";
?>
]]>
       </programlisting>
      </example>
      <example>
       <title>Как обрабатывать UNBUFFERED запросы</title>
       <programlisting role="php">
<![CDATA[
<?php

$result = dbx_query ($link, 'SELECT id, parentid, description FROM table', DBX_RESULT_UNBUFFERED);

echo "<table>\n";
while ($row = dbx_fetch_row($result)) {
    echo "<tr>\n";
    foreach ($row as $field) {
        echo "<td>$field</td>";
    }
    echo "</tr>\n";
}
echo "</table>\n";

?>
]]>
       </programlisting>
      </example>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Как обрабатывать возвращённое значение</title>
    <programlisting role="php">
<![CDATA[
<?php
$link   = dbx_connect(DBX_ODBC, "", "db", "username", "password")
    or die("Не получилось подключиться");

$result = dbx_query($link, 'SELECT id, parentid, description FROM table');

if (is_object($result) ) {
    // ... сделайте кое-что здесь, смотрите подробные примеры ниже ...
    // во-первых, выведите имена и типы полей
    // затем нарисуйте таблицу, заполненную возвращёнными значениями полей
} else {
    exit("Запрос не выполнен");
}

dbx_close($link);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Всегда внимательно изучайте документацию модуля для используемой базы данных.
   </para>
   <para>
    Имена столбцов Oracle возвращаются в нижнем регистре.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>dbx_escape_string</function></member>
    <member><function>dbx_fetch_row</function></member>
    <member><function>dbx_connect</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
