<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: f1e951b988e8aafe49b33bdf2f7812740c66c2d2 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="mongo.queries" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Запросы</title>

 <simplesect xml:id="mongo.queries.secondaries">
  <title>Распределение запросов к вторичным серверам</title>

  <para>
   Все запросы (чтение и запись) отправляются только основному члену реплики, 
   установленному по умолчанию. Это, однако, легко настраивается 
   с помощью <link linkend="mongo.readpreferences">предпочтений чтения</link>, 
   которые позволяют вам установить некоторые общие предпочтения чтения 
   (например, разрешить чтение c ближайшего вторичного сервера), 
   а также предоставляют способы для целевого назначения сервера в конкретной стране, 
   центре обработки данных или даже оборудовании, путём использования 
   <link linkend="mongo.readpreferences.tagsets">наборов тегов реплики</link>.
  </para>
  <para>
   Настройки чтения могут быть настроены на каждом уровне драйвера:
   <simplelist>
    <member>В качетве параметра строки запроса или параметра <methodname>MongoClient::__construct</methodname></member>
    <member>Непосредственно в вызове <methodname>MongoClient::setReadPreference</methodname></member>
    <member>На уровне базы данных с помощью <methodname>MongoDB::setReadPreference</methodname></member>
    <member>На уровне коллекции с помощью <methodname>MongoCollection::setReadPreference</methodname></member>
    <member>На уровне курсора с помощью <methodname>MongoCursor::setReadPreference</methodname> или <methodname>MongoCommandCursor::setReadPreference</methodname></member>
   </simplelist>
   Каждый класс наследует настройку предпочтений чтения из "родительского" контекста.
  </para>
  <example xml:id="mongo.queries.secondaries.inheritence-example">
   <title>Наследование предпочтений чтения от уровня базы данных до курсора</title>
   <programlisting role="php">
<![CDATA[
<?php
$db->setReadPreference(MongoClient::RP_SECONDARY_PREFERRED);
$c = $db->myCollection;

$cursor = $c->find();
?>
]]>
   </programlisting>
  </example>
  <para>
   В этом примере запрос будет выполнен к вторичному серверу. 
   Коллекция наследует <constant>MongoClient::RP_SECONDARY_PREFERRED</constant> базы данных, 
   а курсор наследует её от коллекции.
  </para>
 </simplesect>

  <simplesect xml:id="mongo.queries.choosing.secondary">
   <title>Как выбираются вторичные сервера</title>

   <para>
    Каждый экземпляр <classname>MongoClient</classname> выбирает свой собственный вторичный сервер, 
    используя доступный вторичный сервер с наименьшим временем проверки связи. 
    Итак, если бы у нас был сервер PHP в Европе и в Австралии, 
    и у нас было по одному вторичному серверу в каждом из этих центров обработки данных, мы могли бы сделать:
   </para>
   <example xml:id="mongo.queries.choosing.secondary-example">
    <programlisting role="php">
<![CDATA[
<?php
$options = array("replicaSet" => "setName", "readPreference" => MongoClient::RP_SECONDARY_PREFERRED);

// на австралийском сервере
$m = new MongoClient("mongodb://primary,australianhost.secondary,europeanhost.secondary", $options);
$cursor = $m->foo->bar->find();
$cursor->getNext();
echo "Чтение с: ", $cursor->info()["server"], "\n";

// на европейском сервере
$m = new MongoClient("mongodb://primary,australianhost.secondary,europeanhost.secondary", $options);
$cursor = $m->foo->bar->find();
$cursor->getNext();
echo "Чтение с: ", $cursor->info()["server"], "\n";
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Чтение с: australianHost
Чтение с: europeanHost
]]>
    </screen>
    <para>
     Обратите внимание, что мы должны выполнить запрос до того, 
     как будет выбран вторичный сервер лениво драйвером и для каждого запроса отдельно.
    </para>
   </example>

   <para>
    Вы можете увидеть, что драйвер считает текущим состоянием членов набора, 
    запустив <methodname>MongoClient::getHosts</methodname> или 
    <methodname>MongoClient::getConnections</methodname>.
   </para>

   <para>
    Если ни один вторичный сервер не доступен для чтения, 
    драйвер будет отправлять чтение основному, как мы указали <constant>MongoClient::RP_SECONDARY_PREFERRED</constant>, 
    который будет выполнять откат для выполнения запроса на основном сервере, если вторичные серверы недоступны. 
    Сервер считается читаемым, если его состояние равно 2 (SECONDARY), а его состояние равно 1. 
    Вы можете проверить это с помощью <methodname>MongoClient::getHosts</methodname> и 
    <methodname>MongoClient::getConnections</methodname>.
   </para>

  </simplesect>
  <simplesect xml:id="mongo.queries.notes">
   <title>Случайные заметки</title>

   <para>
    Записи всегда отправляются основному серверу, и по умолчанию все 
    операции чтения отправляются также основному серверу.
   </para>
<!--
   <para>
    The following database commands can be sent to secondaries when using the
    apropriate Read Preference:
    <simplelist>
     <member><methodname>MongoCollection::group</methodname></member>
     <member><methodname>MongoCollection::aggregate</methodname></member>
     <member><methodname>MongoCollection::distinct</methodname></member>
     <member><methodname>MongoCursor::count</methodname></member>
     <member>collStats</member>
     <member>dbStats</member>
     <member>geoNear</member>
     <member>geoSearch</member>
     <member>geoWalk</member>
     <member>inline mapreduce</member>
    </simplelist>
    All other commands are always sent to the primary.
   </para>
-->
  </simplesect>

 <simplesect xml:id="mongo.queries.querying">
  <title>Запросы по _id</title>
  <para>
   Каждому вставленному объекту автоматически присваивается уникальное 
   поле <literal>_id</literal>, которое часто является полезным полем для запросов. 
   Работает аналогично функциональности "получить последний идентификатор вставки", 
   за исключением того, что <literal>_id</literal> выбирается <emphasis>клиентом</emphasis>.
  </para>
  <para>
   Предположим, что мы хотим найти документ, который мы только что вставили. 
   Вставка добавляет поле <literal>_id</literal> к документу, поэтому мы можем выполнить запрос следующим образом:
   
   <example xml:id="mongo.queries.querying-example">
    <programlisting role="php">
<![CDATA[
<?php
$person = array("name" => "joe");

$people->insert($person);

// сейчас у $joe есть поле _id
$joe = $people->findOne(array("_id" => $person['_id']));
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Если пользователь не указал иное, поле <literal>_id</literal> 
   является <classname>MongoId</classname>. Самая распространённая ошибка - попытка 
   использовать строку для совпадения с <classname>MongoId</classname>. 
   Помните, что это два разных типа данных, и они не будут соответствовать друг другу так же, 
   как строка "array()" не совпадает с пустым массивом. Например:

   <example xml:id="mongo.queries.querying.wrong">
    <programlisting role="php">
<![CDATA[
<?php
$person = array("name" => "joe");

$people->insert($person);

// преобразовываем _id в строку
$pid = $person['_id'] . "";

// ОШИБКА - $pid является строкой, а не MongoId
$joe = $people->findOne(array("_id" => $pid));
?>
]]>
    </programlisting>
   </example>
  </para>
 </simplesect>

 <simplesect xml:id="mongo.queries.arrays">
  <title>Массивы</title>

  <para>
   Массивы особенные в нескольких отношениях. Во-первых, есть два типа, 
   которые использует MongoDB: "нормальные" массивы и ассоциативные массивы. 
   Ассоциативные массивы могут иметь любое сочетание ключевых типов и значений. 
   "Нормальные" массивы определяются как массивы с возрастающими числовыми индексами, 
   начинающимися с 0 и увеличивающимися на единицу для каждого элемента. 
   Как обычный PHP-массив.
  </para>

  <para>
   Например, если вы хотите сохранить список наград в документе, вы можете выполнить:
  </para>

  <example xml:id="mongo.queries.arrays-example">
   <programlisting role="php">
<![CDATA[
<?php

$collection->save(array("awards" => array("gold", "silver", "bronze")));

?>
]]>
   </programlisting>
  </example>

  <para>
   Запросы могут попадать в массивы для поиска элементов. 
   Предположим, что мы хотим найти все документы с элементом массива заданного значения. 
   Например, документы с "gold" наградой, такие как:
  </para>

  <screen>
<![CDATA[
{ "_id" : ObjectId("4b06c282edb87a281e09dad9"), "awards" : ["gold", "silver", "bronze"]}
]]>
  </screen>

  <para>
   Это можно сделать простым запросом, игнорируя тот факт, что "awards" - это массив:
  </para>

   <example xml:id="mongo.queries.arrays-example-2">
    <programlisting role="php">
<![CDATA[
<?php

  $cursor = $collection->find(array("awards" => "gold"));

?>
]]>
   </programlisting>
  </example>

  <para>
   Предположим, что мы запрашиваем более сложный объект, 
   если каждый элемент массива был самим объектом, например:
  </para>

  <screen>
<![CDATA[
{
     "_id" : ObjectId("4b06c282edb87a281e09dad9"),
     "awards" :
     [
        {
            "first place" : "gold"
        },
        {
            "second place" : "silver"
        },
        {
            "third place" :  "bronze"
        }
     ]
}
]]>
  </screen>

  <para>
   Не обращая внимания на то, что это массив, 
   мы можем использовать точечную нотацию для запроса подобъекта:
  </para>

   <example xml:id="mongo.queries.querying-arrays-nested">
    <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find(array("awards.first place" => "gold"));

?>
]]>
   </programlisting>
  </example>

  <para>
   Обратите внимание, что не имеет значения, что в имени поля есть пробел 
   (хотя может быть лучше не использовать пробелы, просто чтобы сделать вещи более читабельными).
  </para>

  <para>
   Вы также можете использовать массив для запроса количества возможных значений. 
   Например, если бы мы искали документы "gold" или "copper", мы могли бы сделать:
  </para>

  <example xml:id="mongo.queries.querying-arrays-in">
   <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find(array("awards" => array('$in' => array("gold", "copper"))));

?>
]]>
   </programlisting>
  </example>
 </simplesect>

 <simplesect role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
<!--
     <row>
      <entry>1.3.1</entry>
      <entry>
       Several database commands can now be executed on secondaries.
      </entry>
     </row>
-->
     <row>
      <entry>1.3.0</entry>
      <entry>
       Введена структура <link linkend="mongo.readpreferences">предпочтений чтения</link>, 
       позволяющая более детально контролировать операции чтения со вторичных серверов.
      </entry>
     </row>
     <row>
      <entry>1.3.0</entry>
      <entry>
       Устарело использование <literal>slaveOkay</literal>, альтернатива - 
       <link linkend="mongo.readpreferences">предпочтения чтения</link>.
      </entry>
     </row>
     <row>
      <entry>1.1.0</entry>
      <entry>
       Введена возможность маршрутизации чтения на вторичных серварах членов набора реплик 
       с использованием <methodname>Mongo::setSlaveOkay</methodname>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </simplesect>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

