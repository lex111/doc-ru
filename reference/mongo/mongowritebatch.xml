<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: ac1fc810a47900623e6a0bc1e6680083e9f02f28 Maintainer: lex Status: ready -->
<!-- Reviewed: yes Maintainer: lex -->

<phpdoc:classref xml:id="class.mongowritebatch" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>Класс MongoWriteBatch</title>
 <titleabbrev>MongoWriteBatch</titleabbrev>

 <partintro>

<!-- {{{ MongoWriteBatch intro -->
  <section xml:id="mongowritebatch.intro">
   &reftitle.intro;
   <para>
    MongoWriteBatch является базовым классом для классов 
    <classname>MongoInsertBatch</classname>, <classname>MongoUpdateBatch</classname> 
    и <classname>MongoDeleteBatch</classname>.
   </para>
   <para>
    MongoWriteBatch позволяет "собирать в пакет" несколько операций (одного типа) 
    и отправлять их все в MongoDB одновременно. 
    Это может быть особенно полезно при одновременной работе со многими документами, чтобы уменьшить количество обращений.
   </para>
   <para>
    До версии 1.5.0 драйвера было возможно использовать <methodname>MongoCollection::batchInsert</methodname>, 
    однако, начиная с 1.5.0, этот метод не рекомендуется использовать.
   </para>
   <para>
    Примечание: Этот класс доступен только при общении с серверами MongoDB 2.6.0 (и выше). 
    Он будет выдавать исключение <classname>MongoProtocolException</classname> при попытке использовать его на старых серверах MongoDB.
   </para>
  </section>
<!-- }}} -->

  <section xml:id="mongowritebatch.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>MongoWriteBatch</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>MongoWriteBatch</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    
    <classsynopsisinfo role="comment">&Constants;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="mongowritebatch.constants.command.insert">MongoWriteBatch::COMMAND_INSERT</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="mongowritebatch.constants.command.update">MongoWriteBatch::COMMAND_UPDATE</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="mongowritebatch.constants.command.delete">MongoWriteBatch::COMMAND_DELETE</varname>
     <initializer>3</initializer>
    </fieldsynopsis>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.mongowritebatch')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])" />
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.mongowritebatch')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])" />
   </classsynopsis>
<!-- }}} -->

   <section xml:id="mongowritebatch.constants">
    <title>Типы MongoWriteBatch</title>
    <variablelist>

     <varlistentry xml:id="mongowritebatch.constants.command.insert">
      <term><constant>MongoWriteBatch::COMMAND_INSERT</constant></term>
      <listitem>
       <para>Создаёт пакет записи и вставки</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="mongowritebatch.constants.command.update">
      <term><constant>MongoWriteBatch::COMMAND_UPDATE</constant></term>
      <listitem>
       <para>Создаёт пакет обновления записи</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="mongowritebatch.constants.command.delete">
      <term><constant>MongoWriteBatch::COMMAND_DELETE</constant></term>
      <listitem>
       <para>Создаёт пакет удаления записи</para>
      </listitem>
     </varlistentry>

    </variablelist>
   </section>
  </section>

  <section xml:id="mongowritebatch.description">
   &reftitle.description;
   <para>
    При выполнении пакета с помощью вызова 
    <methodname>MongoWriteBatch::execute</methodname>, MongoWriteBatch будет отправлять 
    до <literal>maxWriteBatchSize</literal> (по умолчанию 1000) 
    или <literal>maxBsonObjectSize</literal> (по умолчанию 16777216 байт), 
    в зависимости от того, что произойдёт первым.
   </para>
   <note>
    <para>
     Документы никогда не будут переданы частично. 
     При добавлении документов в пакет, превышающий лимит, создаётся новый пакет и документ будет помещён в него.
    </para>
   </note>
  </section>

  <section xml:id="mongowritebatch.errors">
   &reftitle.errors;
   <simplelist>
    <member><classname>Exception</classname>, при ошибках разбора параметров</member>
    <member><classname>Exception</classname>, при ошибках проверки аргументов (например, отсутствующие ключи)</member>
    <member><classname>MongoProtocolException</classname>, при обращении к серверу MongoDB старше 2.6.0.</member>
    <member><classname>MongoProtocolException</classname>, при ошибках сокетов.</member>
    <member><classname>MongoWriteConcernException</classname>, когда запись не удалась из-за <link linkend="mongo.writeconcerns">WriteConcerns</link></member>
   </simplelist>
  </section>

  <section xml:id="mongowritebatch.examples">
   &reftitle.examples;
   <example xml:id="mongowritebatch.example.basic">
    <title>Пример <classname>MongoWriteBatch</classname></title>
    <para>
     Добавление документов в пакет и последующее его выполнение:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$mc = new MongoClient("localhost");

$collection = $mc->selectCollection("test", "test");


$docs = array();
$docs[] = array("my" => "demo");
$docs[] = array("is" => "working");
$docs[] = array("pretty" => "well");

$batch = new MongoInsertBatch($collection);
foreach($docs as $document) {
    $batch->add($document);
}
$retval = $batch->execute(array("w" => 1));
var_dump($retval);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(2) {
  ["nInserted"]=>
  int(3)
  ["ok"]=>
  bool(true)
}
]]>
    </screen>
   </example>
  </section>

 </partintro>

 &reference.mongo.entities.mongowritebatch;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
