<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: e9366ee458b2900c53a503b1ad97664e1d9a8859 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongocollection.aggregatecursor" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::aggregateCursor</refname>
  <refpurpose>Выполняет команду конвейера агрегации и получает результаты с помощью курсора</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>MongoCommandCursor</type><methodname>MongoCollection::aggregateCursor</methodname>
   <methodparam><type>array</type><parameter>command</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter></methodparam>
  </methodsynopsis>
  <para>
   С помощью этого метода вы можете выполнять конвейеры структуры агрегации 
   и получать результаты с помощью курсора, вместо того, чтобы возвращать только один документ, 
   как это было бы с <methodname>MongoCollection::aggregate</methodname>. 
   Этот метод возвращает объект <classname>MongoCommandCursor</classname>. 
   Этот объект курсора реализует интерфейс <classname>Iterator</classname> точно так же, 
   как объекты <classname>MongoCursor</classname>, 
   которые возвращаются методом <methodname>MongoCollection::find</methodname>.
  </para>
  <note>
   <simpara>
    Результирующий <classname>MongoCommandCursor</classname> будет 
    наследовать предпочтения чтения этой коллекции. 
    <methodname>MongoCommandCursor::setReadPreference</methodname> 
    может использоваться для изменения предпочтения чтения перед итерацией курсора.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>pipeline</parameter>
     </term>
     <listitem>
      <para>
       Конвейер структуры агрегации для выполнения.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>Опции для команды агрегации. Допустимые варианты:</para>
      <itemizedlist>
       <listitem>
        <para><literal>"allowDiskUse"</literal></para>
        <para>Разрешить этапы агрегации для записи во временные файлы</para>
       </listitem>
       <listitem>
        <para><literal>"cursor"</literal></para>
        <para>
         Можно настроить, сколько исходных документов сервер должен вернуть с 
         первым набором результатов. Начальный размер пакета по умолчанию - <literal>101</literal>. 
         Вы можете изменить его, добавив параметр <literal>batchSize</literal>:
        </para>
        <programlisting role="php">
<![CDATA[
<?php
$collection->aggregateCursor( 
    $pipeline,
    [ "cursor" => [ "batchSize" => 4 ] ]
);
]]>
        </programlisting>
        <para>
         Эта опция только настраивает размер первого пакета. 
         Чтобы настроить размер будущих пакетов, используйте метод 
         <methodname>MongoCommandCursor::batchSize</methodname> 
         в возвращённом объекте <classname>MongoCommandCursor</classname>.         
        </para>
       </listitem>
       <listitem>
        <para><literal>"explain"</literal></para>
        <para>
         Вернуть информацию об обработке конвейера. Эта опция может привести к тому, 
         что команда вернёт результирующий документ, который не подходит для 
         создания <classname>MongoCommandCursor</classname>. 
         Если вам нужно использовать эту опцию, вы должны рассмотреть возможность 
         использования <methodname>MongoCollection::aggregate</methodname>.
        </para>
       </listitem>
       &mongo.command.parameters.maxtimems;
      </itemizedlist>
     </listitem>
    </varlistentry>   
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;  
  <para>
   Возвращает объект <classname>MongoCommandCursor</classname>. 
   Поскольку он реализует интерфейс <classname>Iterator</classname>, 
   вы можете перебирать каждый из результатов, возвращаемых запросом команды. 
   <classname>MongoCommandCursor</classname> также реализует интерфейс 
   <classname>MongoCursorInterface</classname>, 
   который добавляет методы <methodname>MongoCommandCursor::batchSize</methodname>, 
   <methodname>MongoCommandCursor::dead</methodname>, 
   <methodname>MongoCommandCursor::info</methodname>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Пример использования <function>MongoCollection::aggregateCursor</function></title>
   <para>
    Поиск всех различных значений для ключа.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$m = new MongoClient;
$db = $m->test;
$people = $db->people;
$people->drop();

$people->insert(array("name" => "Joe", "points" => 4));
$people->insert(array("name" => "Molly", "points" => 43));
$people->insert(array("name" => "Sally", "points" => 22));
$people->insert(array("name" => "Joe", "points" => 22));
$people->insert(array("name" => "Molly", "points" => 87));

$ages = $people->aggregateCursor( [
        [ '$group' => [ '_id' => '$name', 'points' => [ '$sum' => '$points' ] ] ],
        [ '$sort' => [ 'points' => -1 ] ],
] );

foreach ($ages as $person) {
    echo "{$person['_id']}: {$person['points']}\n";
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
Molly: 130
Joe: 26
Sally: 22
   </screen>
  </example>

  <example>
   <title>Пример использования <function>MongoCollection::aggregateCursor</function>
   с другим начальным размером пакета</title>
   <para>
    Поиск всех различных значений для ключа.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$m = new MongoClient;
$db = $m->test;
$people = $db->people;
$people->drop();

/* Вставьте пример данных */
$people->insert(array("name" => "Joe", "points" => 4));
$people->insert(array("name" => "Molly", "points" => 43));
$people->insert(array("name" => "Sally", "points" => 22));
$people->insert(array("name" => "Joe", "points" => 22));
$people->insert(array("name" => "Molly", "points" => 87));

/* Запустите командный курсор */
$ages = $people->aggregateCursor(
    [
        [ '$group' => [ '_id' => '$name', 'points' => [ '$sum' => '$points' ] ] ],
        [ '$sort' => [ 'points' => -1 ] ],
    ],
    [ "cursor" => [ "batchSize" => 4 ] ]
);

foreach ($ages as $person) {
    echo "{$person['_id']}: {$person['points']}\n";
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
Molly: 130
Joe: 26
Sally: 22
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>MongoDB::command</methodname></member>
    <member><classname>MongoCommandCursor</classname></member>
    <member><methodname>MongoCommandCursor::batchSize</methodname></member>
    <member><methodname>MongoCollection::aggregate</methodname></member>
    <member><link xlink:href="&url.mongodb.docs.aggregation;">Структура агрегации</link> MongoDB</member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
