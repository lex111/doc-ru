<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 565e478d69a9d0c217eda773c77ca823423adf21 Maintainer: lex Status: ready -->
<!-- Reviewed: yes Maintainer: lex -->

<chapter xml:id="mongo.security" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Безопасность</title>

 <section>
  <title>Атаки инъекциями в запросах</title>
  <para>
   Если вы передаёте параметры <literal>$_GET</literal> (или <literal>$_POST</literal>) в запросах, 
   убедитесь, что они сначала приводятся к строкам. 
   Пользователи могут вставлять ассоциативные массивы в запросы GET и POST, 
   которые затем могут стать нежелательными $-запросами.
  </para>

  <para>
   Довольно безобидный пример. Предположим, вы ищете информацию о пользователе 
   по запросу <emphasis>http://www.example.com?username=bob</emphasis>. 
   Ваше приложение выполняет запрос <literal>$collection->find(array("username" => $_GET['username']))</literal>.
  </para>

  <para>
   Кто-то может сломать это, сделав запрос 
   <emphasis>http://www.example.com?username[$ne]=foo</emphasis>, который PHP 
   волшебным образом превратит в ассоциативный массив, превратив его в 
   <literal>$collection->find(array("username" => array('$ne' => "foo")))</literal>, 
   который вернёт всех пользователей, не имеющих имени "foo" (вероятно, всех ваших пользователей).
  </para>

  <para>
   От такой атаки довольно легко защититься: убедитесь, что параметры $_GET и $_POST 
   соответствуют ожидаемому типу, прежде чем отправлять их в базу данных (в данном примере приведите их к строкам).
  </para>

  <para>
   Обратите внимание, что этот тип атаки может использоваться с любым взаимодействием 
   с базой данных: включая поиск, изменение и удаление.
  </para>

  <para>
   Спасибо <link xlink:href="&url.mongodb.injection;">Филу</link> за указание на это.
  </para>

  <para>
   Смотрите <link xlink:href="&url.mongodb.dochub.security;">основную документацию</link> 
   для получения дополнительной информации об SQL-инъекциях в MongoDB.
  </para>
 </section>

 <section>
  <title>Атаки JavaScript-инъекциями</title>
  <para>
   Если вы используете JavaScript, убедитесь, что все переменные, 
   которые пересекают границы PHP-JavaScript, передаются 
   в поле <literal>scope</literal> класса <classname>MongoCode</classname>, 
   а не интерполируются в строку JavaScript. Это может произойти при использовании <function>MongoDB::execute</function>, 
   <literal>$where</literal> сlauses, MapReduces, group-by и в любых других случаях, 
   когда вы можете передать JavaScript в базу данных.
  </para>
  <note>
   <para>
    MapReduce игнорирует поле <literal>scope</literal> класса <classname>MongoCode</classname>, 
    но в команде есть параметр <literal>scope</literal>, который можно использовать вместо него.
   </para>
  </note>
  <para>
   Например, предположим, что у нас есть некоторый JavaScript, 
   чтобы приветствовать пользователя в журналах базы данных. Мы могли бы сделать:
  </para>
  <programlisting role="php">
<![CDATA[
<?php

// не делайте так!

$username = $_POST['username'];
$db->execute("print('Привет, $username!');");

?>
]]>
  </programlisting>
  <para>
   Что будет, если злоумышленник передаст какой-то JavaScript?
  </para>
  <programlisting role="php">
<![CDATA[
<?php

// не делайте так!

// в $username будет передано "'); db.users.drop(); print('"
$db->execute("print('Привет, $username!');");

?>
]]>
  </programlisting>
  <para>
   Теперь MongoDB выполняет строку JavaScript 
   <literal>"print('Привет, '); db.users.drop(); print('!');"</literal>. 
   Эту атаку легко предотвратить: используйте <literal>scope</literal> 
   для передачи переменных из PHP в JavaScript:
  </para>
  <programlisting role="php">
<![CDATA[
<?php

$scope = array("user" => $username);
$db->execute(new MongoCode("print('Привет, '+user+'!');", $scope));

?>
]]>
  </programlisting>
  <para>
   Это добавит переменную <literal>user</literal> в область JavaScript. 
   Теперь, если кто-то попытается отправить вредоносный код, MongoDB безвредно напечатает 
   <literal>Привет, '); db.dropDatabase(); print('!</literal>.
  </para>

  <para>
   Использование <literal>scope</literal> помогает предотвратить выполнение вредоносного ввода базой данных. 
   Тем не менее, вы должны убедиться, что ваш код не изменится и всё равно выполнит ввод! 
   Например, никогда не используйте функцию JavaScript <literal>eval</literal> при вводе пользователем данных:
  </para>
  <programlisting role="php">
<![CDATA[
<?php

// не делайте так!

// $jsShellInput is "db.users.drop();"
$scope = array("input" => $jsShellInput);
$db->execute(new MongoCode("eval(input);", $scope));

?>
]]>
  </programlisting>
  <para>
   Всегда используйте <literal>scope</literal> и никогда не позволяйте 
   базе данных выполнять пользовательский ввод в виде кода.
  </para>
 </section>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

