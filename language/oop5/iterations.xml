<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c2aae8928b69ed28b4e61bd7aadb869e5ccb64d8 Maintainer: shein Status: ready -->
<!-- Reviewed: yes -->
<!-- $Revision$ -->
 <sect1 xml:id="language.oop5.iterations" xmlns="http://docbook.org/ns/docbook">
  <title>Итераторы объектов</title>
  <para>

   PHP 5 предоставляет такой способ объявления объектов, который
   даёт возможность пройти по списку элементов данного объекта,
   например, с помощью оператора &foreach;. По умолчанию,
   в этом обходе (итерации) будут участвовать все 
   <link linkend="language.oop5.visibility">видимые</link> свойства объекта.

  </para>

  <example>
   <title>Итерация простого объекта</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
    public $var1 = 'значение 1';
    public $var2 = 'значение 2';
    public $var3 = 'значение 3';

    protected $protected = 'защищённая переменная';
    private   $private   = 'закрытая переменная';

    function iterateVisible() {
       echo "MyClass::iterateVisible:\n";
       foreach ($this as $key => $value) {
           print "$key => $value\n";
       }
    }
}

$class = new MyClass();

foreach($class as $key => $value) {
    print "$key => $value\n";
}
echo "\n";


$class->iterateVisible();

?>
]]>
   </programlisting>
   &example.outputs; 
   <screen role="php">
<![CDATA[
var1 => значение 1
var2 => значение 2
var3 => значение 3

MyClass::iterateVisible:
var1 => значение 1
var2 => значение 2
var3 => значение 3
protected => защищённая переменная
private => закрытая переменная
]]>
   </screen>

  </example>

 <para>
  Как показывает результат, &foreach; проитерировал все доступные и
  принадлежащие объекту <link linkend="language.oop5.visibility">видимые</link>
  свойства.
 </para>
 <para>
  Кроме того, вы можете развить эту концепцию и реализовать
  встроенный в PHP 5 <link linkend="language.oop5.interfaces">интерфейс</link> 
  <interfacename>Iterator</interfacename>. Это позволит самому объекту решать
  как он будет итерироваться и какие данные будут доступны на каждой итерации.
 </para>

  <example>
   <title>Итерация объекта, реализующего интерфейс Iterator</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyIterator implements Iterator
{
    private $var = array();

    public function __construct($array)
    {
        if (is_array($array)) {
            $this->var = $array;
        }
    }

    public function rewind()
    {
        echo "перемотка в начало\n";
        reset($this->var);
    }
  
    public function current()
    {
        $var = current($this->var);
        echo "текущий: $var\n";
        return $var;
    }
  
    public function key() 
    {
        $var = key($this->var);
        echo "ключ: $var\n";
        return $var;
    }
  
    public function next() 
    {
        $var = next($this->var);
        echo "следующий: $var\n";
        return $var;
    }
  
    public function valid()
    {
        $key = key($this->var);
        $var = ($key !== NULL && $key !== FALSE);
        echo "верный: $var\n";
        return $var;
    }

}

$values = array(1,2,3);
$it = new MyIterator($values);

foreach ($it as $a => $b) {
    print "$a: $b\n";
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen role="php">
<![CDATA[
перемотка в начало
верный: 1
текущий: 1
ключ: 0
0: 1
следующий: 2
верный: 1
текущий: 2
ключ: 1
1: 2
следующий: 3
верный: 1
текущий: 3
ключ: 2
2: 3
следующий:
верный: 
]]>
   </screen>

  </example>

  <para>
   <link linkend="language.oop5.interfaces">Интерфейс</link> <interfacename>IteratorAggregate</interfacename>
   может быть использован как альтернатива реализации всех
   методов интерфейса <interfacename>Iterator</interfacename>.
   <interfacename>IteratorAggregate</interfacename> требует чтобы был реализован только
   один метод - 
   <methodname>IteratorAggregate::getIterator</methodname>, который должен возвращать
   экземпляр класса, реализующий интерфейс <interfacename>Iterator</interfacename>.
  </para>

  <example>
   <title>Итерация объекта, реализующего интерфейс IteratorAggregate</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyCollection implements IteratorAggregate
{
    private $items = array();
    private $count = 0;

    // Требование интерфейса IteratorAggregate
    public function getIterator() {
        return new MyIterator($this->items);
    }

    public function add($value) {
        $this->items[$this->count++] = $value;
    }
}

$coll = new MyCollection();
$coll->add('value 1');
$coll->add('value 2');
$coll->add('value 3');

foreach ($coll as $key => $val) {
    echo "ключ/значение: [$key -> $val]\n\n";
}
?>
]]>
   </programlisting>
   &example.outputs;  
   <screen role="php">
<![CDATA[
перемотка в начало
текущий: value 1
верный: 1
текущий: value 1
ключ: 0
ключ/значение: [0 -> value 1]

следующий: value 2
текущий: value 2
верный: 1
текущий: value 2
ключ: 1
ключ/значение: [1 -> value 2]

следующий: value 3
текущий: value 3
верный: 1
текущий: value 3
ключ: 2
ключ/значение: [2 -> value 3]

следующий:
текущий:
верный:
]]>
   </screen>

  </example>

  <note>
   <para>
    Больше примеров итераторов можно найти в
    <link linkend="spl.iterators">расширении SPL</link>.
   </para>
  </note>

  <note>
   <para>
    Пользователи PHP 5.5 и более поздних версий также могут изучить
    <link linkend="language.generators">генераторы</link>, представляющие собой
    альтернативный способ определения итераторов.
   </para>
  </note> 

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
